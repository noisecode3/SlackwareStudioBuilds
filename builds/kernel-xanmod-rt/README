kernel-5.15.55-rt48-xanmod1 x86_64

https://xanmod.org/

First build kernel-source-xanmod-rt
You can then change the config file in /usr/src/linux-5.15.55-rt48-xanmod1
and the other pkg builds will use it. I will support custom patches also
in the future so that localversion-rt localversion-xanmod will change the
pkgs versions automatically. 

This kernel unlock some serious performance improvements
Install kernel-headers-xanmod-rt before you compile wine-tkg

!!BUT DON'T FORGET TO REMOVE PREVIOUS kernel-headers!!
removepkg kernel-headers # After you're kernel build

This is the only conflicting package, there can only be one kernel-headers
package at the same time. It recommended to install slackware.com
kernel-headers again after you compiled wine-tkg, also you don't need to
be running the kernel when you compile wine-tkg. You only need the
headers for fsync and winesync.

There is a diff file for this configuration to the generic configuration.

First install:
upgradepkg --install-new --reinstall /tmp/kernel-source-xanmod-rt-5.15.55-rt48-noarch-1_SBo.tgz

Then build the other packages and install them from /tmp
Don't forget to configure you're boot manager.
The noefi kernel option can be used when you don't need
efivars for it can mess with the kernel.

Path to kernels:

/boot/vmlinuz-generic
/boot/vmlinuz-huge
/boot/vmlinuz-generic-xanmod-rt

Don't forget you're mkinitrd command and lilo/elilo or whatever bootloader you're using!

Initrd command:
/usr/share/mkinitrd/mkinitrd_command_generator.sh -k 5.15.55-rt48-xanmod1

If you have Intel processor you must load microcode early!
Add -P /boot/intel-ucode.cpio to the generated mkinitrd command!

Note: The current proprietary NVIDIA, VirtualBox, VMware Workstation / Player
and some other dkms modules builds do not officially support THIS RT kernel

For building VirtualBox with generic or huge:
Just build from sbopkg on you're other kernel
If you get errors like:
failed to execute '/usr/share/virtualbox/VBoxCreateUSBNode.sh' '/usr/share/virtualbox/VBoxCreateUSBNode.sh 189 0 09 vboxusers': No such file or directory
You probably have a udev configuration from vbox in initrd when it loads usb drivers you dont need to worry about it.
If it feels too dirty you could move the file:
mv /lib/udev/rules.d/10-virtualbox.rules /root
run:
/etc/rc.d/rc.udev reload
run you're mkinitrd and move back the file:
mkinitrd ........
mv /root/10-virtualbox.rules /lib/udev/rules.d
and run:
/etc/rc.d/rc.udev reload
lilo

# /etc/rc.d/rc.local
# Avoid virtualbox startup service for xanmod1

if echo $(uname -a) | grep xanmod1 > /dev/null; then
    chmod -x /etc/rc.d/rc.vbox*
else
    chmod +x /etc/rc.d/rc.vbox*
fi

if [ -x /etc/rc.d/rc.vboxdrv ]; then
  /etc/rc.d/rc.vboxdrv start
fi

blacklist virtualbox-kernel because if you are using another kernel when
looking for updates it might want to upgrade the modules on xanmod, it wont work
remember you must rebuild when there is a kernel update manually!

For building NVIDIA:
IGNORE_PREEMPT_RT_PRESENCE=1

Don't do this, just use nouveau, if you have nvidia don't game with this kernel,
maybe it works for you anyway.. BTW gaming is nice with this kernel :)

This kernel was build was made for Audio Production on Slackware
and for better use of wine-tkg.
