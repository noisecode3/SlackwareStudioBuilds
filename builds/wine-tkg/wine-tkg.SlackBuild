#!/bin/bash

# Slackware build script for wine-tkg-git

# Copyright 2022 Martin BÃ¥ngens
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd "$(dirname "$0")" ; CWD=$(pwd)

PRGNAM=wine-tkg
VERSION=${VERSION:-git}
PLAIN_VERSION=${PLAIN_VERSION:-}
STAGING_VERSION=${STAGING_VERSION:-}
BUILD=${BUILD:-1}
TAG=${TAG:-_SSb}
PKGTYPE=${PKGTYPE:-tgz}
USE_STAGING=${USE_STAGING:-YES}
USE_GE_PATCHES=${USE_GE_PATCHES:-YES}
PROTONIFY=${PROTONIFY:-NO}
DXVK_DXGI=${DXVK_DXGI:-YES}
WAYLAND=${WAYLAND:-NO}
LOCAL_PRESET_PROMPT=${LOCAL_PRESET_PROMPT:-NO}
ALLOW_SERVER_RT_PRIO=${ALLOW_SERVER_RT_PRIO:-YES}
NTSYNC=${NTSYNC:-NO}
FASTSYNC=${FASTSYNC:-NO}
ESYNC=${ESYNC:-YES}
FSYNC=${FSYNC:-YES}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

TMP=${TMP:-/tmp/SSb}
PKG=${PKG:-$TMP/package-$PRGNAM-git}
OUTPUT=${OUTPUT:-/tmp}

if [ -n "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

if [ "$ARCH" != "x86_64" ]; then
  echo "This script supports only x86_64 now, "
  exit 1
fi

mkdir -p "$TMP"
WINETMP="$( mktemp -d "$TMP/wine-test-XXXXXX" )"
echo "int main(void) {; return(0); }" > "$WINETMP/test.c"
gcc -m32 "$WINETMP/test.c" -o /dev/null >/dev/null 2>&1 && WINE32TEST=${WINE32TEST:-yes}
rm -rf "$WINETMP"
if [[ $WINE32TEST = "yes" ]]; then
    echo "The multilib test passed."
else
    echo "The multilib test has failed."
    exit 1
fi

set -e

rm -rf "$PKG"
mkdir -p "$TMP" "$PKG" "$OUTPUT"
cd "$TMP"
rm -rf wine-tkg-git
rm -rf /tmp/wine-tkg

git clone https://github.com/Frogging-Family/wine-tkg-git

cd wine-tkg-git/wine-tkg-git

if [ "$VERSION" != "git" ]; then
    sed -i "s/_plain_version=\"\"/_plain_version=\"wine-$VERSION\"/" customization.cfg
    sed -i "s/_staging_version=\"\"/_staging_version=\"v$VERSION\"/" customization.cfg
else
    sed -i "s/_plain_version=\"\"/_plain_version=\"$PLAIN_VERSION\"/" customization.cfg
    sed -i "s/_staging_version=\"\"/_staging_version=\"$STAGING_VERSION\"/" customization.cfg
fi


if [ "$USE_STAGING" == "NO" ]; then
    sed -i '/_use_staging=/ s/"true"/"false"/' customization.cfg
fi

if [ "$USE_GE_PATCHES" == "NO" ]; then
    sed -i '/_use_GE_patches=/ s/"true"/"false"/' customization.cfg
fi

if [ "$PROTONIFY" == "YES" ]; then
    sed -i '/_protonify=/ s/"false"/"true"/' customization.cfg
fi

if [ "$LOCAL_PRESET_PROMPT" == "NO" ]; then
    sed -i '/_LOCAL_PRESET=/ s/""/"none"/' customization.cfg
fi

if [ "$ALLOW_SERVER_RT_PRIO" == "YES" ]; then
    sed -i '/_allow_server_rt_prio=/ s/"false"/"true"/' wine-tkg-profiles/advanced-customization.cfg
fi

if [ "$DXVK_DXGI" == "NO" ]; then
    sed -i '/_dxvk_dxgi=/ s/"true"/"false"/' customization.cfg
fi

if [ "$WAYLAND" == "YES" ]; then
    sed -i '/_wayland_driver=/ s/"false"/"true"/' customization.cfg
fi

if [ "$NTSYNC" == "YES" ]; then
    sed -i '/_use_ntsync=/ s/"false"/"true"/' customization.cfg
fi

if [ "$FASTSYNC" == "YES" ]; then
    sed -i '/_use_fastsync=/ s/"false"/"true"/' customization.cfg
fi

if [ "$ESYNC" == "NO" ]; then
    sed -i '/_use_esync=/ s/"true"/"false"/' customization.cfg
fi

if [ "$FSYNC" == "NO" ]; then
    sed -i '/_use_fsync=/ s/"true"/"false"/' customization.cfg
fi

sed -i "s|_nomakepkg_prefix_path=\"\"|_nomakepkg_prefix_path=\"/usr\"|g" customization.cfg
sed -i '/_nomakepkg_dependency_autoresolver=/ s/"true"/"false"/' customization.cfg
sed -i '/_nomakepkg_nover=/ s/"false"/"true"/' wine-tkg-profiles/advanced-customization.cfg

sed -i "s|\"\$_prefix\"|$PKG\"\$_prefix\"|g"                            wine-tkg-scripts/build.sh
sed -i "s|make install|make install DESTDIR=$PKG|g"                     wine-tkg-scripts/build.sh
sed -i "s|_nomakepkg_pkgname=\"\${pkgname}\"|_nomakepkg_pkgname=\"\"|g" wine-tkg-scripts/build.sh
sed -i "s|_nomakepkg_pkgname=\"\${pkgname}\"|_nomakepkg_pkgname=\"\"|g" non-makepkg-build.sh

look_for="local _prefix=\"\${_nomakepkg_prefix_path}/\${_nomakepkg_pkgname}\""
turn_into="local _prefix=\"\${_nomakepkg_prefix_path}\""
sed -i "s|$look_for|$turn_into|g" wine-tkg-scripts/build.sh
sed -i "s|$look_for|$turn_into|g" non-makepkg-build.sh

files_to_copy=$(find "$CWD/patches" -type f -name '[0-9][0-9][0-9][0-9]-*.mypatch' || \
  find "$CWD/patches" -type f -name '[0-9][0-9][0-9][0-9]-*.myrevert' || \
  find "$CWD/patches" -type f -name '[0-9][0-9][0-9][0-9]-*.mylatepatch' || \
  find "$CWD/patches" -type f -name '[0-9][0-9][0-9][0-9]-*.mylaterevert')

for file in $files_to_copy; do
    filename=$(basename "$file")
    cp "$file" "$PWD/wine-tkg-userpatches/$filename"
done

chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

./non-makepkg-build.sh || { rm -rf /tmp/wine-tkg; exit 1; }
stty sane

find "$PKG" -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

cd src/wine-git

VERSION=$(awk '{print $3}' VERSION)
VERSION=$(echo "$VERSION" | tr '-' . )

# Add a desktop menu for winecfg, wine-uninstaller, wine-browsedrive and doc:
mkdir -p "$PKG/usr/share/"{applications,icons/hicolor/scalable/apps,pixmaps}
mkdir -p "$PKG/usr/doc/$PRGNAM-$VERSION"
DOCS=("AUTHORS" "COPYING.LIB" "LICENSE" "LICENSE.OLD" "MAINTAINERS" "VERSION")
FONTS_LICENSE=("COPYING.arial" "COPYING.cour" "COPYING.msyh" "COPYING.times")
cp "${DOCS[@]}" "${FONTS_LICENSE[@]}" "$PKG/usr/doc/$PRGNAM-$VERSION"
cp programs/winecfg/winecfg.svg "$PKG/usr/share/icons/hicolor/scalable/apps/"

# clear source from tmp (can stop the user from being able to build in $HOME)
cd ../..
rm -rf /tmp/wine-tkg

# on slackware /usr/share/man is a symbolic link to /usr/man
mv "$PKG/usr/share/man" "$PKG/usr/man"
find "$PKG/usr/man" -type f -exec gzip -9 {} \;
find "$PKG/usr/man" -type l -exec sh -c '
  for i; do
    ln -s "$(readlink "$i").gz" "$i.gz"
    rm "$i"
  done
' sh {} +

# Add font configuration:
install -d "$PKG/etc/fonts/conf."{avail,d}
install -m644 "$CWD/30-win32-aliases.conf" "$PKG/etc/fonts/conf.avail"
ln -sf /etc/fonts/conf.avail/30-win32-aliases.conf "$PKG/etc/fonts/conf.d/30-win32-aliases.conf"
install -Dm 644 "$CWD/wine-binfmt.conf" "$PKG/usr/lib/binfmt.d/wine.conf"

# Create Wine menu structure:
install -Dm 644 "$CWD/wine.menu" "$PKG/etc/xdg/menus/applications-merged/wine.menu"

# icons and desktop files
install -Dm 644 "$CWD/wine.svg" "$PKG/usr/share/icons/hicolor/scalable/apps/wine.svg"
magick convert "$CWD/wine.svg"    -scale 64 "$PKG/usr/share/pixmaps/wine.png"
magick convert "$CWD/winecfg.png" -scale 64 "$PKG/usr/share/pixmaps/winecfg.png"
magick convert "$CWD/winecfg.png" -scale 64 "$PKG/usr/share/pixmaps/folder-wine.png"
magick convert "$CWD/winecfg.png" -scale 64 "$PKG/usr/share/pixmaps/wine-uninstaller.png"

find "$CWD" -maxdepth 1 -name "*.desktop" -exec install -m 644 {} "$PKG/usr/share/applications/" \;

cat "$CWD/$PRGNAM.SlackBuild" > "$PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild"

mkdir -p "$PKG/install"
cat "$CWD/slack-desc" > "$PKG/install/slack-desc"
cat "$CWD/doinst.sh" > "$PKG/install/doinst.sh"

cd "$PKG"
/sbin/makepkg -l y -c n "$OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
